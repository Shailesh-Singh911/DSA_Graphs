// BFS Algo
void BFS(int i, vector<int>& adj[], vector<int>& visited){
queue<int> q;
q.push(i);
while(!q.empty()){
      int size = q.size();
      while(size--){
	    int x = q.front();
	    q.pop();
	    visited[x] = 1;
	    for(auto it : adj[x]){
		if(!visited[it]) q.push(it);
	    }
      }
   }
}

// BFS on a grid
queue<pair<int, int>> q;
int m = grid.size();
int n = grid[0].size();
int ans = 0;
int row[4] = {-1, 0, 1, 0};
int col[4] = {0, 1, 0, -1};
while(!q.empty()){
    int size = q.size();
    while(size--){
	int r = q.front().first;
	int c = q.front().second;
	q.pop();
	for(int i=0;i<4;i++){
	    int nr = r + row[i];
	    int nc = c + col[i];
	    if(nr>=0 && nc>=0 && nr<m && nc<n && ... ){
		....
		q.push({nr, nc});
	    }
	}
    }
    ans++;
}


    
    
    
    
    
    
 
